name: DevSecOps - Build, Scan and Deploy

on:
  repository_dispatch:
    types: [petclinic-updated]

env:
  REGISTRY: docker.io
  IMAGE_NAME: gurkan/petclinic
  SONAR_HOST_URL: "http://192.168.18.99:9000"
  SONAR_TOKEN: ${{ secrets.YOUR_SONAR_TOKEN }}

jobs:

  # Static Analysis & Security Scanning
  sast-scan:
    name: Static Application Security Testing
    runs-on: self-hosted
    steps:
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: yazicigurkan/spring-petclinic
          ref: main
          token: ${{ secrets.YOUR_GH_PAT }}
          fetch-depth: 0

      # Secrets Scanning
      - name: GitLeaks Secret Scan
        run: |
          gitleaks detect --source . --verbose || true
          echo "âœ… GitLeaks scan completed"

      # SAST - SonarQube
      - name: SonarQube SAST Scan
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      - name: Run SonarQube Analysis
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=petclinic-devops -Dsonar.host.url=${{ env.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.YOUR_SONAR_TOKEN }}
        working-directory: ./   # pom.xml'in olduÄŸu dizin

      # Dependency Scanning
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'petclinic-devops'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
          PATH: ${{ env.JAVA_HOME }}/bin:${{ env.PATH }}
        # EÄŸer entrypoint problemi varsa:
        # entrypoint: ["/bin/bash", "-c"]

  # Build and Test
  build-test:
    name: Build and Unit Tests
    runs-on: self-hosted
    needs: sast-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: yazicigurkan/spring-petclinic
          ref: main
          token: ${{ secrets.YOUR_GH_PAT }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Unit Tests
        run: |
          ./mvnw test
          ./mvnw jacoco:report

      - name: Build Application
        run: ./mvnw clean package -DskipTests

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: target/*.jar
          retention-days: 1

  # Container Build and Security Scan
  container-security:
    name: Container Security Scanning
    runs-on: self-hosted
    needs: build-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: yazicigurkan/spring-petclinic
          ref: main
          token: ${{ secrets.YOUR_GH_PAT }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Container Security Scanning
      - name: Hadolint Dockerfile Scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Trivy Critical/High CVE Check
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-results.sarif
            hadolint-results.sarif

  # Registry Push
  registry-push:
    name: Push to Container Registry
    runs-on: self-hosted
    needs: container-security
    if: github.event_name != 'pull_request'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: docker push ${{ steps.build.outputs.tags }}

  # DAST
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: self-hosted
    needs: registry-push
    if: github.event_name != 'pull_request'
    steps:
      - name: Deploy to Staging
        run: |
          kubectl apply -f k8s/staging/ --namespace=staging
          kubectl set image deployment/petclinic-staging petclinic=${{ steps.build.outputs.tags }} -n staging
          kubectl rollout status deployment/petclinic-staging -n staging --timeout=300s

      - name: Wait for Application Ready
        run: sleep 30

      - name: Get Staging URL
        id: staging-url
        run: |
          STAGING_URL=$(kubectl get svc petclinic-staging-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "url=http://${STAGING_URL}:8080" >> $GITHUB_OUTPUT

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ steps.staging-url.outputs.url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: ${{ steps.staging-url.outputs.url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # GitOps Deployment
  gitops-deploy:
    name: GitOps Deployment
    runs-on: self-hosted
    needs: [container-security, dast-scan]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v4
        with:
          repository: yazicigurkan/petclinic-gitops
          token: ${{ secrets.YOUR_GH_PAT }}
          path: gitops

      - name: Update Kubernetes Manifests
        run: |
          cd gitops
          sed -i "s|image:.*|image: ${{ steps.build.outputs.tags }}|" k8s/production/deployment.yaml

      - name: Commit and Push Manifest Changes
        run: |
          cd gitops
          git config --global user.email "devsecops-bot@company.com"
          git config --global user.name "DevSecOps Bot"
          git add k8s/production/deployment.yaml
          git commit -m "ðŸš€ Deploy:
